@page "/chart"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client

@using Blazorise.Charts
@using Blazorise.Charts.Streaming

<button @onclick="RedrawChart">Redraw</button>

<LineChart @ref="lineChart" TItem="LiveDataPoint" OptionsObject="@lineChartOptions">
    <ChartStreaming TItem="LiveDataPoint"
                    Options="new ChartStreamingOptions { Delay = 2000 }"
                    Refreshed="@OnLineChartRefreshed" />
</LineChart>

@code {
    LineChart<LiveDataPoint> lineChart;
    Random random = new Random();



    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> {
        ChartColor.FromRgba(255, 99, 132, 0.2f),
        ChartColor.FromRgba(54, 162, 235, 0.2f),
        ChartColor.FromRgba(255, 206, 86, 0.2f),
        ChartColor.FromRgba(75, 192, 192, 0.2f),
        ChartColor.FromRgba(153, 102, 255, 0.2f),
        ChartColor.FromRgba(255, 159, 64, 0.2f)
    };
    List<string> borderColors = new List<string> {
        ChartColor.FromRgba(255, 99, 132, 1f),
        ChartColor.FromRgba(54, 162, 235, 1f),
        ChartColor.FromRgba(255, 206, 86, 1f),
        ChartColor.FromRgba(75, 192, 192, 1f),
        ChartColor.FromRgba(153, 102, 255, 1f),
        ChartColor.FromRgba(255, 159, 64, 1f)
    };

    public class LiveDataPoint
    {
        public object X { get; set; }
        public double Y { get; set; }
    }

    object lineChartOptions = new
    {
        Scales = new
        {
            X = new
            {
                Type = "realtime",
                Realtime = new
                {
                    Duration = 20000,
                    Refresh = 500,
                    Delay = 2000,
                }
            },
            Y = new
            {
                Title = new
                {
                    Display = true,
                    Text = "Value"
                }
            }
        },
        Interaction = new
        {
            Intersect = false
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RedrawChart();
        }
    }

    async Task RedrawChart()
    {
        await lineChart.Clear();
        await lineChart.AddLabelsDatasetsAndUpdate(new string[] { }, GetLineChartDataset());
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint>(),
            Label = "Dataset 1 (real-time)",
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            Fill = false,
            Tension = (float?)0.4,
        };
    }

    Task OnLineChartRefreshed(ChartStreamingData<LiveDataPoint> data)
    {
        data.Value = new LiveDataPoint
        {
            X = DateTime.Now,
            Y = RandomScalingFactor()
        };

        return Task.CompletedTask;
    }

    double RandomScalingFactor()
    {
        return Math.Round((random.NextDouble() * 100) - 50);
    }
}
