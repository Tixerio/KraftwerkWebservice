@page "/"
@using ApexCharts
@using Blazorise.Charts
@using Blazorise.Charts.Streaming
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="mainDiv">
    <h1>Kraftwerk Frontend!</h1>
    <h2>Current Energy: @Energy</h2>
    <button @onclick="GetEnergyStart">Start</button>


<LineChart @ref="horizontalLineChart" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions">
    <ChartStreaming TItem="LiveDataPoint"
                    Options="new ChartStreamingOptions { Delay = 2000 }"
                    Refreshed="@OnHorizontalLineRefreshed" />
</LineChart>

@code {
    LineChart<LiveDataPoint> horizontalLineChart;
    Random random = new Random(DateTime.Now.Millisecond);

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.6f), ChartColor.FromRgba(54, 162, 235, 1), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    public struct LiveDataPoint
    {
        public object X { get; set; }
        public object Y { get; set; }
    }

    private object horizontalLineChartOptions = new
    {
	    Chart = new
	    {
		    BackgroundColor = ChartColor.FromRgba(40, 40, 40, 0.8f), // Dark grey background color
	    },
        Scales = new
        {
            Y = new
            {
                Title = new
                {
                    Display = true,
                    Text = "Frequency",
                    Color = "#ffffff" 
                },
                Min = -2.5,
                Max = 2.5,
                Ticks = new
                {
                    StepSize = 0.5,
                    Color = "#ffffff" 
                },
                Grid = new 
                {
					Color = "#ffffff",
                    
				}
            }
        },
        Interaction = new
        {
            Intersect = false
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.WhenAll(
                HandleRedraw(horizontalLineChart, GetLineChartDataset1));
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>(BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets)
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();
        await chart.AddLabelsDatasetsAndUpdate(Labels, getDataSets.Select(x => x.Invoke()).ToArray());
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint> { new LiveDataPoint { X = DateTime.Now, Y = 50 } },
            Label = "Dataset 1 (linear interpolation)",
            BackgroundColor = backgroundColors[0],
            BorderColor = backgroundColors[0],
            Fill = true, // Set fill to start from the baseline
            Tension = (float?)0.4, // This creates a smoother curve
            PointRadius = 3,
            CubicInterpolationMode = "monotone",
        };
    }

    HubConnection hub;
    public double Energy { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        hub = new HubConnectionBuilder()
            .WithUrl("https://localhost:7272/Powergrid")
            .Build();

        await hub.StartAsync();

        hub.On<string>("ReceiveMessage", async (message) =>
        {
            if (double.TryParse(message, out var newEnergy))
            {
                Console.WriteLine(newEnergy);
                Energy = newEnergy;
                await InvokeAsync(UpdateChartOptions);
                await horizontalLineChart.Update();
                InvokeAsync(StateHasChanged);
            }
        });
    }

    private async Task GetEnergyStart()
    {
        while (true)
        {
            try
            {
                await hub.SendAsync("GetEnergyR");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            await Task.Delay(2000);
        }
    }

    Task OnHorizontalLineRefreshed(ChartStreamingData<LiveDataPoint> data)
    {
        data.Value = new LiveDataPoint
        {
            X = DateTime.Now,
            Y = (Energy / 10000) // Adjust the energy scaling factor as needed
        };

        return Task.CompletedTask;
    }

    private async Task UpdateChartOptions()
    {
        horizontalLineChartOptions = new
        {
	        Chart = new
	        {
		        BackgroundColor = ChartColor.FromRgba(40, 40, 40, 0.8f), // Dark grey background color
	        },
            Scales = new
            {
                Y = new
                {
                    Title = new
                    {
                        Display = true,
                        Text = "Frequency"
                    },
                    Min = -2.5,
                    Max = 2.5,
                }
            },
            Interaction = new
            {
                Intersect = false
            }
        };

        await horizontalLineChart.Update();
    }
}
</div>