@page "/"
@using Blazorise.Charts
@using Blazorise.Charts.Streaming
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>
<div class="align-content-center text-center justify-content-center h-100 w-100">
    <Modal @bind-Visible="blackoutVisible">
        <ModalContent Centered>
            <ModalHeader>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <h4>🗲 Blackout 🗲</h4>
            </ModalBody>
        </ModalContent>
    </Modal>
    <div class="d-flex flex-column">
        <div class="d-flex flex-row justify-content-center">
            <div class="d-flex flex-row p-1 min-h-100">
                <button class="btn btn-primary m-1" @onclick="ChangeStartStop">@(Stopped == false ? "Stop" : "Start")</button>
                <button class="btn btn-primary m-1" @onclick="Reset">Reset</button>
            </div>
            <div class="align-self-center">
                <select class="form-select" @onchange="OnDropdownChange">
                    <option selected>Select vour Member: </option>
                    @foreach (var member in Members.Where(x => x.Value.Contains("Consumer")))
                    {
                        <option value="@member.Key">@member.Value</option>
                    }
                </select>
            </div>
            <div class="align-self-center d-flex flex-row m-1">
                <NumericPicker Placeholder=@AmountText @bind-Value="@CurrentMemberMultiplicator"/>
                <button class="btn btn-primary ms-1" @onclick="ChangeConsumerAmount">Save</button>
            </div>
            
            <div class="d-flex flex-row mx-auto p-1 align-items-center">
                <svg fill="#ffffff" height="2rem" width="2rem" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                     viewBox="0 0 360.627 360.627" xml:space="preserve">
                    <g id="XMLID_931_">
                        <g>
                            <g>
                                <path d="M259.652,112.643L259.652,112.643l-7.282,148.468l-55.115-33.255H143.93V94.475L54.401,16.036v43.47L0,17.837v340.869
                                                    h124.06h19.871h103.653h10.8h73.076l-12.069-246.063H259.652z M123.93,338.706H20V306.4h63.388v-20H20v-36.444h63.388v-20H20
                                                    v-36.444h63.388v-20H20v-36.444h63.388v-20H20V58.349l54.401,41.669V60.15l49.529,43.394V338.706z M248.565,338.705H144.06
                                                    v-90.85h47.629l59.569,35.943L248.565,338.705z M268.588,338.706l10.107-206.063h21.653l10.107,206.063H268.588z"/>
                                <path d="M349.321,13.246c-7.303-7.303-17.013-11.325-27.342-11.325c-10.328,0-20.038,4.022-27.342,11.325
                                                    c-5.329,5.329-8.937,12.02-10.478,19.284c-2.638,1.494-5.078,3.344-7.223,5.488c-13.126,13.126-13.126,34.484,0,47.612
                                                    c6.359,6.358,14.813,9.86,23.806,9.86c8.993,0,17.447-3.502,23.806-9.86c2.145-2.146,3.994-4.585,5.489-7.224
                                                    c7.264-1.541,13.954-5.148,19.284-10.478C364.396,52.854,364.396,28.322,349.321,13.246z M335.179,53.787
                                                    c-3.312,3.311-7.711,5.245-12.388,5.446l-6.912,0.298l-2.159,6.573c-0.671,2.045-1.787,3.856-3.314,5.384
                                                    c-2.581,2.581-6.013,4.003-9.664,4.003c-3.65,0-7.083-1.422-9.664-4.002c-5.329-5.329-5.329-14,0-19.328
                                                    c1.527-1.527,3.339-2.643,5.385-3.315l6.571-2.159l0.298-6.91c0.202-4.678,2.136-9.077,5.447-12.388
                                                    c3.525-3.526,8.213-5.468,13.199-5.468c4.986,0,9.674,1.941,13.199,5.468C342.456,34.667,342.456,46.509,335.179,53.787z"/>
                            </g>
                        </g>
                    </g>
                </svg>
                <h3 class="m-2 align-self-center me-4">: @Members.Count(x => x.Value.Contains("Powerplant"))
                </h3>
                <svg xmlns="http://www.w3.org/2000/svg" width="2.4rem" height="2.4rem" fill="#ffffff" viewBox="0 0 256 256"><path d="M240,208H224V136l2.34,2.34A8,8,0,0,0,237.66,127L139.31,28.68a16,16,0,0,0-22.62,0L18.34,127a8,8,0,0,0,11.32,11.31L32,136v72H16a8,8,0,0,0,0,16H240a8,8,0,0,0,0-16ZM48,120l80-80,80,80v88H160V152a8,8,0,0,0-8-8H104a8,8,0,0,0-8,8v56H48Zm96,88H112V160h32Z"></path></svg>
                <h3 class="m-2 align-self-center">: @Members.Count(x => x.Value.Contains("Consumer"))
                </h3>
            </div>
            <div class="ms-auto align-self-center me-2">
                <h3 class="my-auto">@CurrentTime.AddMinutes(Time).TimeOfDay</h3>
            </div>
        </div>
        <div class="p-3">
            <div class="card">
                <div class="card-body">
                    <LineChart @ref="horizontalLineChart" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions">
                        <ChartStreaming TItem="LiveDataPoint"
                                        Options="new ChartStreamingOptions { Delay = 2000 }"
                                        Refreshed="@OnHorizontalLineRefreshed" />
                    </LineChart>
                </div>
            </div>
        </div>
        
    </div>
</div>

@code {
    
    private Modal modalRef;
    
    public bool blackoutVisible = false;

    public int currentMemberMultiplicator;

    public int GetAmountPowerplants()
    {
	    return Members.Count(x => x.Value.Contains("Powerplant"));
    }

    public int CurrentMemberMultiplicator
    {
        get { return this.currentMemberMultiplicator; }
        set
        {
            this.currentMemberMultiplicator = value;
            MultiplicatorDictionary[ActiveMember.Value.Key] = value;
        }
    }

    public string AmountText { get; set; } = "Amount for selection";

    public KeyValuePair<string, string>? ActiveMember { get; set; }

    public
    LineChart<LiveDataPoint> horizontalLineChart;
    public Dictionary<string, string> Members { get; set; } = new();
    public Dictionary<string, int> MultiplicatorDictionary { get; set; } = new();

    public void SetBlackoutAlert()
    {
        if (blackoutVisible)
        {
            blackoutVisible = false;
            return;
        }

        blackoutVisible = true;
    }

    public bool Stopped { get; set; } = false;

    private void OnDropdownChange(ChangeEventArgs e)
    {
        if ((e.Value is string dropdownValue) && !String.IsNullOrWhiteSpace(dropdownValue))
        {
            ActiveMember = Members.FirstOrDefault(x => x.Key == dropdownValue);
            CurrentMemberMultiplicator = MultiplicatorDictionary.FirstOrDefault(x => x.Key == dropdownValue).Value;
            AmountText = "Amount for Consumers";
        }
        else
        {
            ActiveMember = null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.WhenAll(
                HandleRedraw(horizontalLineChart, GetLineChartDataset1));
            await GetEnergyStart();
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>(BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets)
        where TDataSet : ChartDataset<TItem>
        where TOptions : Blazorise.Charts.ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();
        await chart.AddLabelsDatasetsAndUpdate(new []{"Red"}, getDataSets.Select(x => x.Invoke()).ToArray());
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint> { new LiveDataPoint {} },
            BackgroundColor = backgroundColors[0],
            BorderColor = backgroundColors[0],
            Fill = true,
            Tension = (float?)0.4,
            PointRadius = 3,
            CubicInterpolationMode = "monotone",
        };
    }

    HubConnection hub;
    public double Energy { get; set; } = 0;
    public int Time { get; set; } = 0;
    public DateTime CurrentTime = new DateTime();


    protected override async Task OnInitializedAsync()
    {
        hub = new HubConnectionBuilder()
            .WithUrl("https://localhost:7272/Powergrid")
            .Build();

        await hub.StartAsync();
        await hub.SendAsync("GetMemberDataR");

        hub.On<string>("ReceiveMessage", async (message) =>
        {
            if (double.TryParse(message, out var newEnergy))
            {
                Energy = newEnergy;

                await InvokeAsync(StateHasChanged);
            }
        });
        hub.On<bool>("ReceiveStop", async (message) =>
        {
            Stopped = message;
        });
        hub.On<int>("ReceiveTime", async (message) =>
        {
	        Time = message;
	        await InvokeAsync(StateHasChanged);
        });

        hub.On<Dictionary<string, string>>("ReceiveMembers", async (message) =>
        {
            Members = message;
            foreach (var member in Members)
            {
                if (member.Value.Contains("Consumer"))
                {
                    MultiplicatorDictionary.Add(member.Key, 500);
                    continue;
                }
                MultiplicatorDictionary.Add(member.Key, 5);
            }

            Console.WriteLine("Before " + Members.Count());
            await InvokeAsync(StateHasChanged);
            Console.WriteLine("After " + Members.Count());
        });

        hub.On<Dictionary<string, int>>("ReceiveMemberData", async (message) =>
        {
            MultiplicatorDictionary = message;
        });
    }

    public async Task ChangeConsumerAmount()
    {
        await hub.SendAsync("ChangeMultiplicatorAmountR", ActiveMember.Value.Key, CurrentMemberMultiplicator);
    }

    private async Task ChangeStartStop()
    {
        await hub.SendAsync("StartStop");
    }

    private async Task GetEnergyStart()
    {
        await hub.SendAsync("GetMemberDataR");
        await hub.SendAsync("GetCurrentTimeR");

        while (true)
        {
            try
            {
                await hub.SendAsync("GetEnergyR");

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            if (Energy / 10000 + 50 > 52.5 || Energy / 10000 + 50 < 47.5)
            {
                blackoutVisible = true;
                await Reset();
            }
            await InvokeAsync(StateHasChanged);
            await Task.Delay(2000);
        }
    }

    private async Task Reset()
    {
        await hub.SendAsync("ResetEnergyR");
        Energy = 0;
    }
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.6f), ChartColor.FromRgba(54, 162, 235, 1), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };

    public struct LiveDataPoint
    {
        public object X { get; set; }
        public object Y { get; set; }
    }

    private object horizontalLineChartOptions = new Blazorise.Charts.ChartOptions()
    {
        Scales = new ChartScales()
        {
            Y = new ChartAxis()
            {
                Title = new ChartScaleTitle()
                {
                    Display = false,
                    Text = "Frequency",

                },
                Min = -3,
                Max = 3,
                Ticks = new ChartAxisTicks()
                {
                    Callback = (value,index,values) => (value + 50).ToString()
                },
                Grid = new ChartAxisGridLine()
                {
                    Color = "#ffffff",
                },
            },
            X = new ChartAxis()
            {
                Type  = "realtime",
                Title = new ChartScaleTitle()
                {
                    Text = "Test"
                },
                Display = true,
            },
        },
    };

    Task OnHorizontalLineRefreshed(ChartStreamingData<LiveDataPoint> data)
    {
        data.Value = new LiveDataPoint
        {
            X = DateTime.Now,
            Y = (Energy / 10000)
        };

        return Task.CompletedTask;
    }
}
