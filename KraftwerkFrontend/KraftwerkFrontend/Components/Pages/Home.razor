@page "/"
@using Blazorise.Charts
@using Blazorise.Charts.Streaming
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>
<div class="mainDiv">
    @if(blackoutVisible)
    {
        <div class="wrapperAlert">
            <p class="alertText">🗲 Blackout 🗲</p>
            <button @onclick="SetBlackoutAlert">Ok</button>
        </div>
    }

    <div class="appDiv">
        <div class="wrapperTop">
            <div class="headlineDiv">
                <h1>Kraftwerk Frontend!</h1>
                <h2>Current Power: @Energy</h2>
                <div class="buttonDiv">
                    <button @onclick="ChangeStartStop">@(Stopped == false ? "Stop" : "Start")</button>
                    <button @onclick="Reset">Reset</button>
                    <div class="dropdown">
                        <p>
                            <label class="dropdown">
                                Select your Member:
                                <select class="dropdown" @onchange="OnDropdownChange">
                                    <option class="dropdown" value="">Select a value</option>
                                    @foreach (var member in Members)
                                    {
                                        <option value="@member.Key">@member.Value</option>
                                    }
                                </select>
                            </label>
                        </p>
                    </div>
                    <div class="inputField">
                        <Field>
                            <p class="inputHeadline">Amount @AmountText</p>
                            <NumericPicker Placeholder="0" @bind-Value="@CurrentMemberMultiplicator"/>
                        </Field>
                    </div>
                    <button @onclick="ChangeConsumerAmount">Save</button>
                    <div class="timeDiv">
	                    <p>Time</p>
	                    <p class="timeText">@CurrentTime.AddMinutes(Time).TimeOfDay</p>
                    </div>
                    <div>
                        <p class="counterMember">Producers: @Members.Count(x => x.Value.Contains("Powerplant"))</p>
                        <p class="counterMember">Consumers: @Members.Count(x => x.Value.Contains("Consumer"))</p>
                    </div>
                </div>
            </div>
            <div class="placeholderDiv">
            </div>
        </div>
        <div class="wrapperBottom">
            <div class="labelsDiv">
                <p class="topLabel">53</p>
                <p class="middleLabel">51.5</p>
                <p class="middleLabel">50</p>
                <p class="middleLabel">48.5</p>
                <p class="bottomLabel">47</p>
            </div>
            <div class="chartDiv">
                <LineChart @ref="horizontalLineChart" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions">
                    <ChartStreaming TItem="LiveDataPoint"
                                    Options="new ChartStreamingOptions { Delay = 2000 }"
                                    Refreshed="@OnHorizontalLineRefreshed" />
                </LineChart>
            </div>
        </div>
    </div>
</div>

@code {
    public bool blackoutVisible = false;

    public int currentMemberMultiplicator;


    public int CurrentMemberMultiplicator
    {
        get { return this.currentMemberMultiplicator; }
        set
        {
            this.currentMemberMultiplicator = value;
            MultiplicatorDictionary[ActiveMember.Value.Key] = value;
        }
    }

    public string AmountText { get; set; } = "for selection";

    public KeyValuePair<string, string>? ActiveMember { get; set; }

    public
    LineChart<LiveDataPoint> horizontalLineChart;
    public Dictionary<string, string> Members { get; set; } = new();
    public Dictionary<string, int> MultiplicatorDictionary { get; set; } = new();

    public void SetBlackoutAlert()
    {
        if (blackoutVisible)
        {
            blackoutVisible = false;
            return;
        }

        blackoutVisible = true;
    }

    public bool Stopped { get; set; } = false;

    private void OnDropdownChange(ChangeEventArgs e)
    {
        if ((e.Value is string dropdownValue) && !String.IsNullOrWhiteSpace(dropdownValue))
        {
            ActiveMember = Members.FirstOrDefault(x => x.Key == dropdownValue);
            if (ActiveMember.Value.Value.Contains("Powerplant"))
            {
                CurrentMemberMultiplicator = MultiplicatorDictionary.FirstOrDefault(x => x.Key == dropdownValue).Value;
                AmountText = "Pulses";
                return;
            }
            CurrentMemberMultiplicator = MultiplicatorDictionary.FirstOrDefault(x => x.Key == dropdownValue).Value;
            AmountText = "Consumers";
        }
        else
        {
            ActiveMember = null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.WhenAll(
                HandleRedraw(horizontalLineChart, GetLineChartDataset1));
            await GetEnergyStart();
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>(BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets)
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();
        await chart.AddLabelsDatasetsAndUpdate(Labels, getDataSets.Select(x => x.Invoke()).ToArray());
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint> { new LiveDataPoint { X = DateTime.Now, } },
            BackgroundColor = backgroundColors[0],
            BorderColor = backgroundColors[0],
            Fill = true,
            Tension = (float?)0.4,
            PointRadius = 3,
            CubicInterpolationMode = "monotone",
        };
    }

    HubConnection hub;
    public double Energy { get; set; } = 0;
    public int Time { get; set; } = 0;
    public DateTime CurrentTime = new DateTime();


    protected override async Task OnInitializedAsync()
    {
        hub = new HubConnectionBuilder()
            .WithUrl("https://localhost:7272/Powergrid")
            .Build();

        await hub.StartAsync();
        await hub.SendAsync("GetMemberDataR");

        hub.On<string>("ReceiveMessage", async (message) =>
        {
            if (double.TryParse(message, out var newEnergy))
            {
                Energy = newEnergy;
                await InvokeAsync(StateHasChanged);
            }
        });
        hub.On<bool>("ReceiveStop", async (message) =>
        {
            Stopped = message;
        });
        hub.On<int>("ReceiveTime", async (message) =>
        {
	        Time = message;
	        await InvokeAsync(StateHasChanged);
        });

        hub.On<Dictionary<string, string>>("ReceiveMembers", async (message) =>
        {
            Members = message;
            foreach (var member in Members)
            {
                if (member.Value.Contains("Consumer"))
                {
                    MultiplicatorDictionary.Add(member.Key, 500);
                    continue;
                }
                MultiplicatorDictionary.Add(member.Key, 5);
            }
            Console.WriteLine(message.Count());
            await InvokeAsync(StateHasChanged);

        });

        hub.On<Dictionary<string, int>>("ReceiveMemberData", async (message) =>
        {
            MultiplicatorDictionary = message;
        });
    }

    public async Task ChangeConsumerAmount()
    {
        await hub.SendAsync("ChangeMultiplicatorAmountR", ActiveMember.Value.Key, CurrentMemberMultiplicator);
    }

    private async Task ChangeStartStop()
    {
        await hub.SendAsync("StartStop");
    }

    private async Task GetEnergyStart()
    {
        await hub.SendAsync("GetMemberDataR");
        await hub.SendAsync("GetCurrentTimeR");

        while (true)
        {
            try
            {
                await hub.SendAsync("GetEnergyR");

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            if (Energy / 10000 + 50 > 52.5 || Energy / 10000 + 50 < 47.5)
            {
                blackoutVisible = true;
                await Reset();
            }


            await UpdateChartOptions();
            await InvokeAsync(StateHasChanged);
            await Task.Delay(2000);
        }
    }

    private async Task Reset()
    {
        await hub.SendAsync("ResetEnergyR");
        Energy = 0;
    }


    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.6f), ChartColor.FromRgba(54, 162, 235, 1), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };

    public struct LiveDataPoint
    {
        public object X { get; set; }
        public object Y { get; set; }
    }

    private object horizontalLineChartOptions = new
    {
        ChartScales = new
        {
            Y = new
            {
                Color = "#ffffff",
                Display = false
            },
            X = new
            {
                Display = false
            }
        },

        Chart = new
        {
            BackgroundColor = ChartColor.FromRgba(40, 40, 40, 0.8f)

        },
        Scales = new
        {
            Y = new
            {
                Title = new
                {
                    Display = false,
                    Text = "Frequency",

                },
                Min = -3,
                Max = 3,
                Ticks = new
                {
                    StepSize = 1.5,
                    Color = "#ffffff",
                    Display = false,
                },
                Grid = new
                {
                    Color = "#ffffff",
                },
            },
            X = new
            {
                Ticks = new
                {
                    Display = false,
                    color = "#ffffff"
                }
            }
        },
        Interaction = new
        {
            Intersect = true
        }
    };

    Task OnHorizontalLineRefreshed(ChartStreamingData<LiveDataPoint> data)
    {
        data.Value = new LiveDataPoint
        {
            X = DateTime.Now,
            Y = (Energy / 10000)
        };

        return Task.CompletedTask;
    }

    private async Task UpdateChartOptions()
    {

        horizontalLineChartOptions = new
        {
            ChartAxisTicks = new ChartAxisTicks()
            {
                Callback = (value, index, values) => (value + 50).ToString()
            },
            ChartScales = new
            {
                Y = new
                {
                    Color = "#3B3B3B",
                }
            },

            Scales = new
            {

                Y = new
                {

                    Title = new
                    {
                        Display = true,
                        Color = "#3B3B3B",
                        Text = "Frequency"
                    },

                },

            },
            Interaction = new
            {
                Intersect = false
            }
        };

        await horizontalLineChart.Update();
    }
}
