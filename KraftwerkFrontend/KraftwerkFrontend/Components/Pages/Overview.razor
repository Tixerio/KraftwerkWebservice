@page "/overview"
@using Microsoft.AspNetCore.SignalR.Client
@using Vizor.ECharts;
@using Color = Vizor.ECharts.Color
@using Label = Vizor.ECharts.Label
@using Tooltip = Vizor.ECharts.Tooltip
@using KraftwerkFrontend.Components.Shared
@using Blazorise.DeepCloner
@rendermode InteractiveServer


<PageTitle>Overview</PageTitle>
<div class="d-flex align-content-center justify-content-center h-100 container">
    <div class="col h-100 w-100">
        <div class="row w-100 h-50">
            <ConsumptionChart Time="@Time" ConsumptionList="@expectedConsumption"></ConsumptionChart>
            <MarketShareChart MarketShares="@marketShares"></MarketShareChart>
        </div>
        <div class="row align-content-center w-100 h-50 d-flex"><ProductionChart ProductionList="@productionList"></ProductionChart></div>
    </div>
</div>


@code {
    HubConnection hub;
    private double[][] expectedConsumption = new double[24][];
    private List<(DateTime,double)> productionList = new List<(DateTime,double)>();

    private Dictionary<string, (string,double)> marketShares = new Dictionary<string, (string,double)>();
    private int Time { get; set; } = 0;
    private string? ID { get; set;}

    public class MarketShare
    {
        public string Name { get; set; }
        public double Value { get; set; }
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        hub = new HubConnectionBuilder()
            .WithUrl("https://localhost:7272/Powergrid")
            .Build();
        await hub.StartAsync();
        await hub.SendAsync("GetExpectedConsume");
        hub.On<Dictionary< int, double>>("ReceiveExpectedConsume", async (message) =>
        {
            double[][] new_list = new double[24][];
            List<double> values = message.Values.ToList();
            for (int i = 0; i < message.Count(); i++)
            {
                new_list[i] = [i, values[i]];
            };
            expectedConsumption = new_list;
            await InvokeAsync(StateHasChanged);
        });
        hub.On<int>("ReceiveTime", async (message) =>
        {
            Time = message;
            await InvokeAsync(StateHasChanged);
        });
        hub.On<double>("ReceiveEnergy", async (message) =>
        {
            if (productionList.Count >= 9)
            {
                productionList.RemoveAt(0);
            }
            productionList.Add((DateTime.Now,message / 10000.0));
            await InvokeAsync(StateHasChanged);
        });
        hub.On<Dictionary<string, MarketShare>>("ReceivePieChartData",async (message) =>
        {
            marketShares.Clear();
            message.ToList().ForEach(x =>
            {
                marketShares[x.Key] = (x.Value.Name, x.Value.Value);
            }); await InvokeAsync(StateHasChanged);
        });
    }
    
}