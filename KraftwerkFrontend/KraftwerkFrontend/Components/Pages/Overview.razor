@page "/overview"
@using Microsoft.AspNetCore.SignalR.Client
@using Vizor.ECharts;
@using Color = Vizor.ECharts.Color
@using Label = Vizor.ECharts.Label
@using Tooltip = Vizor.ECharts.Tooltip
@rendermode InteractiveServer


<PageTitle>Overview</PageTitle>
<div class="d-flex align-content-center text-center justify-content-center h-100 container">
    <div class="row row-cols-2 h-100 w-100">
        <div class="col"><Vizor.ECharts.EChart CssClass="h-100 w-100" @ref="chart" Options="@options"/></div>
        <div class="col">Column</div>
        <div class="col">Column</div>
        <div class="col">Column</div>
    </div>

</div>


@code {
    HubConnection hub;
    private Vizor.ECharts.EChart? chart;
    private List<int> consumption = new List<int>();
    private int Time { get; set; } = 0;
    private ChartOptions options = new()
    {
        YAxis = new YAxis()
        {
            Type = AxisType.Value,
            
        },
        XAxis = new XAxis()
        {
            Max = 23,
            AxisPointer = new AxisPointer()
            {
                Show = true,
                Value  = 0.1,
                Snap = false,
                Label = new Label()
                {
                    Formatter = new StringOrFunction(new JavascriptFunction("function (value) { return `${String(Math.trunc(value.value)).padStart(2,'0')}:${String(Math.round(value.value*60%60)).padStart(2,'0')}`; }")),
                },
                LineStyle = new LineStyle()
                {
                    Color = "#ffffff",
                    Width = 2,
                },
                Handle = new Handle()
                {
                    Show = true,
                    Size = 0,
                }
                
            },
            Type = AxisType.Value,
            
        },
        Tooltip = new Tooltip()
        {
            TriggerOn = TriggerOn.None
        },
        Legend = new Legend()
        {
            Orient = Orient.Vertical,
            Left = "left"
        },
        Series = new List<ISeries>()
        {
            new LineSeries()
            {
                Data = new double[][]
                {
                    [1048.0,1.0],
                },
                Emphasis = new()
                {
                    ItemStyle = new()
                    {
                        ShadowBlur = 10,
                        ShadowOffsetX = 0,
                        ShadowColor = Color.FromRGBA(0, 0, 0, 0.5)
                    }
                }
            }
        }
    };

    protected override async Task OnInitializedAsync()
    {
        hub = new HubConnectionBuilder()
            .WithUrl("https://localhost:7272/Powergrid")
            .Build();
        await hub.StartAsync();
        await hub.SendAsync("GetExpectedConsume");
        hub.On<Dictionary< int, double>>("ReceiveExpectedConsume", async (message) =>
        {
            double[][] new_list = new double[24][];
            List<double> values = message.Values.ToList();
            for (int i = 0; i < message.Count(); i++)
            {
                new_list[i] = [i, values[i]];
            };
            (options.Series[0] as LineSeries).Data = new_list;
            await InvokeAsync(StateHasChanged);
            if (chart == null)
            {
                return;
            }
            await chart.UpdateAsync();
        });
        hub.On<int>("ReceiveTime", async (message) =>
        {
            Time = message;
            options.XAxis.AxisPointer.Value = Time / 60.0 % 23.0;
            await InvokeAsync(StateHasChanged);
            if (chart == null)
            {
                return;
            }
            await chart.UpdateAsync();
        });


    }
}