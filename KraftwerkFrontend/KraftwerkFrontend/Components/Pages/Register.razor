@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@page "/register"

<PageTitle>Register</PageTitle>
<div class="m-auto d-flex align-items-center justify-content-center h-100 w-100">
    <div class="card">
        <div class="card-body">
            <h3 class="card-title text-center">Register</h3>
            <form method="post" @onsubmit="Submit" @formname="register">
                <AntiforgeryToken />
                <div class="mb-3">
                    <label class="form-label" for="username">
                        Name
                    </label>
                    <InputText @bind-Value="@Name" class="form-control"
                               id="username"/>
                </div>

                    <p>@ID</p>
                
                <div class="mb-3">
                    <button type="submit" class=" btn btn-primary d-flex align-self-center">
                        Create Kraftwerk
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    public class MemberObject
    {
        public MemberObject(string name, string type)
        {
            Name = name;
            Type = type;
        }

        public string Name { get; set; }
        public string Type { get; set; }
    }
    
    [SupplyParameterFromForm]
    public string? Name { get; set; }
    HubConnection hub;
    private string? ID { get; set; } = "Test";

    protected override async Task OnInitializedAsync()
    {
        hub = new HubConnectionBuilder()
            .WithUrl("https://localhost:7272/Powergrid")
            .Build();
        await hub.StartAsync();
    }

    private async Task Submit()
    {
        if (Name == null)
        {
            return;
        }
        await hub.SendAsync("RegisterR", new MemberObject(Name, "Powerplant"));
        Console.WriteLine(ID);
        hub.On<string>("ReceiveMessage",
            async(message) =>
            {
                ID = message;
                Console.WriteLine(ID);
                await InvokeAsync(StateHasChanged);
            });
        await InvokeAsync(StateHasChanged);

    }
}